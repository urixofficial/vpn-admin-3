# [file name]: admin.py
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, filters

from app.core.logger import log
from app.domains.billing.repository import transaction_repository
from app.domains.users.repository import user_repository
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ conversations
from .conversations import ask_new_user_id, ask_user_id_to_delete
from .utils import get_sender_id, get_message_func, check_for_admin
from ..keyboards import admin_keyboard, users_keyboard, billing_keyboard


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""

	if not check_for_admin(update, context):
		await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	keyboard = admin_keyboard()

	# –î–ª—è callback query –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update.callback_query:
		await update.callback_query.edit_message_text(
			"üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
			reply_markup=keyboard
		)
	else:
		await update.message.reply_text(
			"üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
			reply_markup=keyboard
		)


async def users_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

	if not check_for_admin(update, context):
		await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	keyboard = users_keyboard()

	if update.callback_query:
		await update.callback_query.edit_message_text(
			"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
			reply_markup=keyboard
		)
	else:
		await update.message.reply_text(
			"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
			reply_markup=keyboard
		)


async def billing_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–ª–∏–Ω–≥–æ–º"""
	if not check_for_admin(update, context):
		await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	keyboard = billing_keyboard()

	if update.callback_query:
		await update.callback_query.edit_message_text(
			"üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–æ–º",
			reply_markup=keyboard
		)
	else:
		await update.message.reply_text(
			"üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–æ–º",
			reply_markup=keyboard
		)


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""

	query = update.callback_query
	await query.answer()

	callback_data = query.data

	if callback_data == "admin_users":
		await users_panel(update, context)
	elif callback_data == "admin_billing":
		await billing_panel(update, context)
	elif callback_data == "admin_system_stats":
		await system_stats(update, context)
	elif callback_data == "users_list":
		await list_users(update, context)
	elif callback_data == "users_add":
		await ask_new_user_id(update, context)
	elif callback_data == "users_delete":
		await ask_user_id_to_delete(update, context)
	elif callback_data == "users_block":
		await block_user(update, context)
	elif callback_data == "users_unblock":
		await unblock_user(update, context)
	elif callback_data == "billing_list":
		await billing_list(update, context)
	elif callback_data == "billing_add":
		await billing_add(update, context)
	elif callback_data == "billing_delete":
		await billing_delete(update, context)
	elif callback_data == "admin_back":
		await admin_panel(update, context)


# ======================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ =======================


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	try:
		users = user_repository.get_all()
		if not users:
			await message_func("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
			return

		message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
		for user in users:
			status_icon = "‚úÖ" if user.is_active() else "‚ùå"
			message += f"{status_icon} {user.username} ({user.id})\n"

		# –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
		if len(message) > 4096:
			for x in range(0, len(message), 4096):
				await message_func(message[x:x + 4096])
		else:
			await message_func(message)

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}.")
		await message_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	await message_func("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	await message_func("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# ======================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–æ–º =======================


async def billing_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	await message_func("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def billing_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	await message_func("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def billing_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	await message_func("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# ======================== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =======================


async def system_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return

	# –í—ã–≤–æ–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	try:
		users = user_repository.get_all()
		active_users = user_repository.get_active_users()
		expired_users = user_repository.get_expired_users()

		message = (
			"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
			f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}.\n"
			f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}.\n"
			f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {len(expired_users)}.\n"
			f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transaction_repository.get_all())}."
		)

		await message_func(message)

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
		await message_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")


def setup_admin_handlers(application, admin_id: int):
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
	# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
	admin_filter = filters.User(admin_id)

	application.add_handler(CommandHandler("admin", admin_panel))
	application.add_handler(CommandHandler("users", users_panel))
	application.add_handler(CommandHandler("billing", billing_panel))
	application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^admin_"))
	application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^users_"))
	application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^billing_"))
