# [file name]: conversations.py
from datetime import date, timedelta

from telegram import Update
from telegram.ext import (
    ContextTypes, MessageHandler, CommandHandler, filters, ConversationHandler, CallbackQueryHandler
)

from app.core.exceptions import UserAlreadyExistsException, NameIsNotUniqueException
from app.core.logger import log
from app.domains.users.models import UserCreate, UserUpdate, UserStatus
from app.domains.users.repository import user_repository
from .utils import get_message_func, check_for_admin, check_for_valid_id, check_for_valid_name
from ..keyboards import cancel_keyboard, confirm_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_USER_ID, ASK_USER_NAME, CONFIRM_DELETION = range(3)

# –†–µ–∂–∏–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π
ADD_MODE = "add"
EDIT_MODE = "edit"
DELETE_MODE = "delete"


async def ask_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log.debug(f"–ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞: {context.user_data.get('mode')}")

    message_func = get_message_func(update)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if not check_for_admin(update, context):
        await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END

    mode = context.user_data.get("mode")
    action = {"add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "delete": "—É–¥–∞–ª–µ–Ω–∏—è"}.get(mode, "–æ–ø–µ—Ä–∞—Ü–∏–∏")

    await message_func(
        f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
        reply_markup=cancel_keyboard()
    )
    return ASK_USER_ID


async def ask_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log.debug(f"–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞: {context.user_data.get('mode')}")

    mode = context.user_data.get("mode")
    action = {"add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"}.get(mode, "–æ–ø–µ—Ä–∞—Ü–∏–∏")

    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
        reply_markup=cancel_keyboard()
    )
    return ASK_USER_NAME


async def process_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥"""
    log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    user_id_text = update.message.text
    mode = context.user_data.get("mode")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if not check_for_valid_id(user_id_text):
        action = {"add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "delete": "—É–¥–∞–ª–µ–Ω–∏—è"}.get(mode, "–æ–ø–µ—Ä–∞—Ü–∏–∏")
        await update.message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
            reply_markup=cancel_keyboard()
        )
        return ASK_USER_ID

    user_id = int(user_id_text)
    context.user_data["user_id"] = user_id
    user = user_repository.get_by_id(user_id)

    if mode == ADD_MODE:
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data["mode"] = EDIT_MODE
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"üë§ –¢–µ–∫—É—â–µ–µ –∏–º—è: {user.username}\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_NAME
        else:
            await ask_user_name(update, context)
            return ASK_USER_NAME
    elif mode == EDIT_MODE:
        if not user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_ID
        await update.message.reply_text(
            f"üë§ –¢–µ–∫—É—â–µ–µ –∏–º—è: {user.username}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=cancel_keyboard()
        )
        return ASK_USER_NAME
    elif mode == DELETE_MODE:
        if not user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_ID
        await update.message.reply_text(
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
            f"üë§ –ò–º—è: {user.username}\n"
            f"üÜî ID: {user.id}",
            reply_markup=confirm_keyboard()
        )
        return CONFIRM_DELETION
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END


async def process_user_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {context.user_data.get('mode')}")

    mode = context.user_data.get("mode")
    user_id = context.user_data.get("user_id")

    if mode in [ADD_MODE, EDIT_MODE]:
        new_user_name = update.message.text
        action = {"add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"}.get(mode, "–æ–ø–µ—Ä–∞—Ü–∏–∏")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if not check_for_valid_name(new_user_name):
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_NAME

        try:
            if mode == ADD_MODE:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = UserCreate(
                    telegram_id=user_id,
                    username=new_user_name,
                    billing_start_date=date.today(),
                    billing_end_date=date.today() + timedelta(days=30),
                    status=UserStatus.ACTIVE
                )
                new_user = user_repository.create(user_data)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üë§ –ò–º—è: {new_user.username}\n"
                    f"üÜî ID: {new_user.id}\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {new_user.billing_start_date}\n"
                    f"üìÖ –ö–æ–Ω–µ—Ü: {new_user.billing_end_date}\n"
                    f"üéØ –°—Ç–∞—Ç—É—Å: {new_user.status.value}\n"
                )
                log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {new_user.username} ({user_id})")
            elif mode == EDIT_MODE:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = UserUpdate(
	                username=new_user_name
                )
                user_repository.update(user_id, user_data)
                updated_user = user_repository.get_by_id(user_id)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                    f"üë§ –ò–º—è: {updated_user.username}\n"
                    f"üÜî ID: {updated_user.id}\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {updated_user.billing_start_date}\n"
                    f"üìÖ –ö–æ–Ω–µ—Ü: {updated_user.billing_end_date}\n"
                    f"üéØ –°—Ç–∞—Ç—É—Å: {updated_user.status.value}\n"
                )
                log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_user.username} ({user_id})")

            return ConversationHandler.END

        except NameIsNotUniqueException:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{new_user_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è {action}:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_NAME
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n"
                f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
                reply_markup=cancel_keyboard()
            )
            return ASK_USER_ID

    elif mode == DELETE_MODE:
        query = update.callback_query
        await query.answer()
        callback_data = query.data

        if not user_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.")
            return ConversationHandler.END

        user = user_repository.get_by_id(user_id)

        if callback_data == "confirm_yes":
            if user_repository.delete(user.id):
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
                )
                log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {user.username} ({user.id})")
            else:
                await query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}."
                )
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} ({user.id})")
        elif callback_data == "confirm_no":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        return ConversationHandler.END

    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    message_func = get_message_func(update)
    await message_func("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


def setup_conversation_handlers(application, admin_id: int):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    admin_filter = filters.User(admin_id)

    user_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                lambda update, context: context.user_data.update({"mode": ADD_MODE}) or ask_user_id(update, context),
                pattern="^users_add$"
            ),
            CallbackQueryHandler(
                lambda update, context: context.user_data.update({"mode": EDIT_MODE}) or ask_user_id(update, context),
                pattern="^users_edit$"
            ),
            CallbackQueryHandler(
                lambda update, context: context.user_data.update({"mode": DELETE_MODE}) or ask_user_id(update, context),
                pattern="^users_delete$"
            )
        ],
        states={
            ASK_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_id)],
            ASK_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_operation)],
            CONFIRM_DELETION: [CallbackQueryHandler(process_user_operation, pattern="^confirm_")],
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")]
    )

    application.add_handler(user_handler)