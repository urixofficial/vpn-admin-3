# [file name]: conversations.py
from datetime import date, timedelta

from telegram import Update
from telegram.ext import (
	ContextTypes, MessageHandler, CommandHandler, filters, ConversationHandler, CallbackQueryHandler
)

from app.core.exceptions import UserAlreadyExistsException, NameIsNotUniqueException
from app.core.logger import log
from app.domains.users.models import UserCreate, UserStatus
from app.domains.users.repository import user_repository
from .utils import get_sender_id, get_message_func, check_for_admin, check_for_valid_id, check_for_valid_name
from ..keyboards import cancel_keyboard, confirm_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_NEW_USER_ID, ASK_NEW_USER_NAME, ASK_USER_ID_TO_DELETE, CONFIRM_USER_DELETING = range(4)


# ======================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======================

async def ask_new_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	log.debug("–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å ID.")

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return ConversationHandler.END

	await message_func(
		"–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
		reply_markup=cancel_keyboard()
	)
	return ASK_NEW_USER_ID


async def ask_new_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	log.debug("–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏.")

	new_user_id_text = update.message.text

	# –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if not check_for_valid_id(new_user_id_text):
		await update.message.reply_text(
			"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n"
			"–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
			reply_markup=cancel_keyboard()
		)
		return ASK_NEW_USER_ID

	new_user_id = int(new_user_id_text)
	context.user_data["new_user_id"] = new_user_id

	await update.message.reply_text(
		"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
		reply_markup=cancel_keyboard()
	)
	return ASK_NEW_USER_NAME


async def add_new_user_to_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
	log.debug("–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î.")

	try:
		new_user_name = update.message.text

		# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if not check_for_valid_name(new_user_name):
			await update.message.reply_text(
				"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.\n"
				"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
				reply_markup=cancel_keyboard()
			)
			return ASK_NEW_USER_NAME

		new_user_id = context.user_data["new_user_id"]

		# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user_data = UserCreate(
			telegram_id=new_user_id,
			username=new_user_name,
			billing_start_date=date.today(),
			billing_end_date=date.today() + timedelta(days=30),
			status=UserStatus.ACTIVE
		)

		new_user = user_repository.create(user_data)

		await update.message.reply_text(
			f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
			f"üë§ –ò–º—è: {new_user.username}\n"
			f"üÜî ID: {new_user.id}\n"
			f"üìÖ –ù–∞—á–∞–ª–æ: {new_user.billing_start_date}\n"
			f"üìÖ –ö–æ–Ω–µ—Ü: {new_user.billing_end_date}\n"
			f"üéØ –°—Ç–∞—Ç—É—Å: {new_user.status.value}\n"
		)

		log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {new_user.username} ({new_user_id})")
		return ConversationHandler.END

	except UserAlreadyExistsException as e:
		await update.message.reply_text(
			f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º ID:",
			reply_markup=cancel_keyboard()
		)
		return ASK_NEW_USER_ID

	except NameIsNotUniqueException as e:
		await update.message.reply_text(
			f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{new_user_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
			"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
			reply_markup=cancel_keyboard()
		)
		return ASK_NEW_USER_NAME

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
		await update.message.reply_text(
			f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n"
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
			reply_markup=cancel_keyboard()
		)
		return ASK_NEW_USER_ID


# ======================== –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======================


async def ask_user_id_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	log.debug("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å ID.")

	message_func = get_message_func(update)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if not check_for_admin(update, context):
		await message_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return ConversationHandler.END

	await message_func(
		"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
		reply_markup=cancel_keyboard()
	)
	return ASK_USER_ID_TO_DELETE


async def confirm_user_deleting(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
	log.debug("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

	user_id_to_delete_text = update.message.text

	# –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if not check_for_valid_id(user_id_to_delete_text):
		await update.message.reply_text(
			"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n"
			"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
			reply_markup=cancel_keyboard()
		)
		return ASK_USER_ID_TO_DELETE

	user_id_to_delete = int(user_id_to_delete_text)
	context.user_data["user_id_to_delete"] = user_id_to_delete

	user = user_repository.get_by_id(user_id_to_delete)

	if not user:
		await update.message.reply_text(
			f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
			"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
			reply_markup=cancel_keyboard()
		)
		return ASK_USER_ID_TO_DELETE

	await update.message.reply_text(
		f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
		f"üë§ –ò–º—è: {user.username}\n"
		f"üÜî ID: {user.id}",
		reply_markup=confirm_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	)
	return CONFIRM_USER_DELETING


async def delete_user_from_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
	query = update.callback_query
	await query.answer()

	callback_data = query.data
	user_id_to_delete = context.user_data.get("user_id_to_delete")

	if not user_id_to_delete:
		await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.")
		return ConversationHandler.END

	user = user_repository.get_by_id(user_id_to_delete)

	if callback_data == "confirm_yes":
		if user_repository.delete(user.id):
			await query.edit_message_text(
				f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
			)
			log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {user.username} ({user.id})")
		else:
			await query.edit_message_text(
				f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}."
			)
			log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} ({user.id})")
	elif callback_data == "confirm_no":
		await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

	return ConversationHandler.END


# ======================== –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ =======================


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ callback queries
	message_func = get_message_func(update)
	await message_func("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

	return ConversationHandler.END


def setup_conversation_handlers(application, admin_id: int):
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
	admin_filter = filters.User(admin_id)

	add_user_handler = ConversationHandler(
		entry_points=[
			CallbackQueryHandler(ask_new_user_id, pattern="^users_add$")
		],
		states={
			ASK_NEW_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_new_user_name)],
			ASK_NEW_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_new_user_to_db)]
		},
		fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")]
	)

	delete_user_handler = ConversationHandler(
		entry_points=[
			CallbackQueryHandler(ask_user_id_to_delete, pattern="^users_delete$")
		],
		states={
			ASK_USER_ID_TO_DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_user_deleting)],
			CONFIRM_USER_DELETING: [CallbackQueryHandler(delete_user_from_db, pattern="^confirm_")]
		},
		fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")]
	)

	application.add_handler(add_user_handler)
	application.add_handler(delete_user_handler)