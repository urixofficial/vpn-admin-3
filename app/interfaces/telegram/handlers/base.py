# [file name]: base.py
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from app.core.logger import log
from app.domains.users.repository import user_repository
from ..keyboards import user_keyboard, ask_registration_keyboard


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
	user = update.effective_user
	user_id = user.id
	username = user.username

	try:
		db_user = user_repository.get_by_id(user_id)

		if db_user:
			if db_user.is_active():
				days_left = db_user.days_until_expiry()
				message = (
					f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
					f"‚úÖ –í–∞—à VPN –∞–∫—Ç–∏–≤–µ–Ω.\n"
					f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}.\n"
					f"üí∞ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {db_user.billing_end_date}.\n\n"
				)
			else:
				message = (
					f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
					f"‚ùå –í–∞—à VPN –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\n"
					f"üí∞ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–Ω–µ—Å–∏—Ç–µ –æ–ø–ª–∞—Ç—É."
				)
			keyboard = user_keyboard()
		else:
			message = (
				f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
				f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ VPN.\n"
			)
			keyboard = ask_registration_keyboard()

		await update.message.reply_text(message, reply_markup=keyboard)

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è {user_id}: {e}")
		await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user = update.effective_user
	user_id = user.id
	username = user.username
	admin_id = context.bot_data["admin_id"]

	# –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	context.bot.send_message(
		chat_id=admin_id,
		text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
		reply_markup=ask_registration_keyboard()
	)

	# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
	user = update.effective_user
	user_id = user.id

	try:
		db_user = user_repository.get_by_id(user_id)
		if not db_user:
			await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
			return

		if not db_user.is_active():
			await update.message.reply_text("‚ùå –í–∞—à VPN –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø.")
			return

		# –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ - –∫–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
		await update.message.reply_text(
			"üìÅ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ."
		)

		# –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		if context.bot_data.get("admin_id"):
			await context.bot.send_message(
				chat_id=context.bot_data["admin_id"],
				text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ñ–∏–≥\n"
				     f"ID: {user_id}\n"
				     f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if db_user.is_active() else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
			)

		log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ñ–∏–≥")

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {user_id}: {e}")
		await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
	user = update.effective_user
	user_id = user.id

	try:
		db_user = user_repository.get_by_id(user_id)
		if not db_user:
			await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
			return

		message = (
			f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
			f"üë§ –ò–º—è: {db_user.username}\n"
			f"üìÖ –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {db_user.billing_start_date}\n"
			f"üìÖ –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {db_user.billing_end_date}\n"
			f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {db_user.days_until_expiry()}\n"
			f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if db_user.is_active() else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
		)

		if update.callback_query:
			await update.callback_query.message.reply_text(message)
		else:
			await update.message.reply_text(message)

	except Exception as e:
		log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
		await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
	message = (
		"‚ùî –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É VPN:\n\n"
		"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
		"‚ùî–ü–æ–º–æ—â—å - –í—ã–≤–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
		"üìä–°—Ç–∞—Ç—É—Å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n"
		"üìñ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN.\n"
		"‚öô –ö–æ–Ω—Ñ–∏–≥ - –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
	)
	if update.callback_query:
		await update.callback_query.message.reply_text(message)
	else:
		await update.message.reply_text(message)


async def instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
	message = (
		"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN:\n\n"
		"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –∫–ª–∏–µ–Ω—Ç –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
		"2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
		"3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
		"4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
		"‚ö†Ô∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	)
	if update.callback_query:
		await update.callback_query.message.reply_text(message)
	else:
		await update.message.reply_text(message)


async def handle_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	query = update.callback_query
	await query.answer()

	callback_data = query.data

	if callback_data == "user_help":
		await help(update, context)
	elif callback_data == "user_stats":
		await stats(update, context)
	elif callback_data == "user_instructions":
		await instructions(update, context)
	elif callback_data == "user_config":
		await get_config(update, context)


def setup_base_handlers(application, admin_id: int):
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
	application.add_handler(CommandHandler("start", start))
	application.add_handler(CommandHandler("stats", stats))
	application.add_handler(CommandHandler("get_config", get_config))
	application.add_handler(CommandHandler("help", help))
	application.add_handler(CommandHandler("instructions", instructions))
	application.add_handler(CallbackQueryHandler(handle_user_callback, pattern="^user_"))
