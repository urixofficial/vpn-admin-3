# [file name]: bot.py
# [file content begin]
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
	Application, CommandHandler, MessageHandler,
	ContextTypes, filters, ConversationHandler
)
from datetime import date, timedelta
import re

from app.core.exceptions import TelegramBotException, UserAlreadyExistsException, UserNotFoundException
from app.core.logger import log
from app.core.config import settings
from app.domains.users.repository import user_repository
from app.domains.users.models import UserCreate, UserStatus
from app.domains.billing.repository import transaction_repository


class VPNBot():
	"""–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""

	def __init__(self):
		self.token = settings.telegram_token
		self.admin_id = settings.telegram_admin_id
		self.application: Application = None

		# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
		self.ADD_USER, self.DELETE_USER, self.EXTEND_USER = range(3)

	def setup(self):
		"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
		if not self.token:
			raise TelegramBotException("Telegram token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		self.application = Application.builder().token(self.token).build()
		self._setup_handlers()
		log.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

	async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
		user = update.effective_user
		user_id = user.id

		try:
			db_user = user_repository.get_by_id(user_id)

			if db_user:
				if db_user.is_active():
					days_left = db_user.days_until_expiry()
					message = (
						f"üëã –ü—Ä–∏–≤–µ—Ç, {db_user.username}!\n\n"
						f"‚úÖ –í–∞—à VPN –∞–∫—Ç–∏–≤–µ–Ω\n"
						f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
						f"üí∞ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {db_user.billing_end_date}\n\n"
						f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_config"
					)
				else:
					message = (
						f"üëã –ü—Ä–∏–≤–µ—Ç, {db_user.username}!\n\n"
						f"‚ùå –í–∞—à VPN –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
						f"üí∞ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
					)
			else:
				message = (
					f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
					f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ VPN.\n"
					f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
				)

			await update.message.reply_text(message)

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è {user_id}: {e}")
			await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

	async def get_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
		user = update.effective_user
		user_id = user.id

		try:
			db_user = user_repository.get_by_id(user_id)
			if not db_user:
				await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
				return

			if not db_user.is_active():
				await update.message.reply_text("‚ùå –í–∞—à VPN –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø.")
				return

			# –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ - –∫–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
			await update.message.reply_text(
				"üìÅ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
				"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ."
			)

			# –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			if self.application:
				await self.application.bot.send_message(
					chat_id=self.admin_id,
					text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ñ–∏–≥\n"
					     f"ID: {user_id}\n"
					     f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if db_user.is_active() else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
				)

			log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ñ–∏–≥")

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {user_id}: {e}")
			await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞.")

	async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
		user = update.effective_user
		user_id = user.id

		try:
			db_user = user_repository.get_by_id(user_id)
			if not db_user:
				await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
				return

			message = (
				f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
				f"üë§ –ò–º—è: {db_user.username}\n"
				f"üìÖ –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {db_user.billing_start_date}\n"
				f"üìÖ –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {db_user.billing_end_date}\n"
				f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {db_user.days_until_expiry()}\n"
				f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if db_user.is_active() else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
			)

			await update.message.reply_text(message)

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
			await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

	async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
		user = update.effective_user

		if user.id != self.admin_id:
			await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
			return

		keyboard = [
			[KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
			[KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")],
			[KeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø"), KeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
		]

		reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

		await update.message.reply_text(
			"üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
			reply_markup=reply_markup
		)

	async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
		if update.effective_user.id != self.admin_id:
			return

		try:
			users = user_repository.get_all()
			if not users:
				await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
				return

			message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
			for user in users:
				status_icon = "‚úÖ" if user.is_active() else "‚ùå"
				message += f"{status_icon} {user.username} (ID: {user.id})\n"

			# –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
			if len(message) > 4096:
				for x in range(0, len(message), 4096):
					await update.message.reply_text(message[x:x + 4096])
			else:
				await update.message.reply_text(message)

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
			await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

	async def system_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
		if update.effective_user.id != self.admin_id:
			return

		try:
			users = user_repository.get_all()
			active_users = user_repository.get_active_users()
			expired_users = user_repository.get_expired_users()

			message = (
				"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
				f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
				f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}\n"
				f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {len(expired_users)}\n"
				f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transaction_repository.get_all())}"
			)

			await update.message.reply_text(message)

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
			await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")

	# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

	async def add_user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		if update.effective_user.id != self.admin_id:
			return

		await update.message.reply_text(
			"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
			"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
			"<code>ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π</code>\n\n"
			"–ü—Ä–∏–º–µ—Ä:\n"
			"<code>123456789 –ò–≤–∞–Ω–ò–≤–∞–Ω–æ–≤</code>\n\n"
			"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
			parse_mode="HTML"
		)
		return self.ADD_USER

	async def add_user_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		try:
			text = update.message.text.strip()

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
			parts = text.split()
			if len(parts) != 2:
				await update.message.reply_text(
					"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
					"<code>ID –ò–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π</code>\n\n"
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
					parse_mode="HTML"
				)
				return self.ADD_USER

			user_id_str, username = parts

			# –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if not user_id_str.isdigit():
				await update.message.reply_text(
					"‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n"
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
				)
				return self.ADD_USER

			user_id = int(user_id_str)

			# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user_data = UserCreate(
				telegram_id=user_id,
				username=username,
				billing_start_date=date.today(),
				billing_end_date=date.today()
			)

			created_user = user_repository.create(user_data)

			await update.message.reply_text(
				f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
				f"üë§ –ò–º—è: {created_user.username}\n"
				f"üÜî ID: {created_user.id}\n"
				f"üìÖ –ù–∞—á–∞–ª–æ: {created_user.billing_start_date}\n"
				f"üìÖ –ö–æ–Ω–µ—Ü: {created_user.billing_end_date}\n"
			)

			log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {created_user.username} (ID: {user_id})")
			return ConversationHandler.END

		except UserAlreadyExistsException as e:
			await update.message.reply_text(
				f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º ID:"
			)
			return self.ADD_USER
		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
			await update.message.reply_text(
				f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n"
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
			)
			return self.ADD_USER

	async def delete_user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		if update.effective_user.id != self.admin_id:
			return

		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
		users = user_repository.get_all()
		if not users:
			await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
			return ConversationHandler.END

		user_list = "üë• –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
		for user in users:
			status_icon = "‚úÖ" if user.is_active() else "‚ùå"
			user_list += f"{status_icon} {user.username} (ID: {user.id})\n"

		user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n(–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"

		await update.message.reply_text(user_list)
		return self.DELETE_USER

	async def delete_user_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		try:
			text = update.message.text.strip()

			if not text.isdigit():
				await update.message.reply_text(
					"‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n"
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
				)
				return self.DELETE_USER

			user_id = int(text)

			# –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
			user = user_repository.get_by_id(user_id)
			if not user:
				await update.message.reply_text(
					f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
				)
				return self.DELETE_USER

			# –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user_repository.delete(user_id)

			await update.message.reply_text(
				f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
				f"üë§ –ò–º—è: {user.username}\n"
				f"üÜî ID: {user.id}"
			)

			log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} (ID: {user_id})")
			return ConversationHandler.END

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
			await update.message.reply_text(
				f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n"
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
			)
			return self.DELETE_USER

	async def extend_user_access(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
		if update.effective_user.id != self.admin_id:
			return

		await update.message.reply_text(
			"‚è∞ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
			"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
			"<code>ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π</code>\n\n"
			"–ü—Ä–∏–º–µ—Ä:\n"
			"<code>123456789 30</code>\n\n"
			"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
			parse_mode="HTML"
		)
		return self.EXTEND_USER

	async def extend_user_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞"""
		try:
			text = update.message.text.strip()
			parts = text.split()

			if len(parts) != 2:
				await update.message.reply_text(
					"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
					"<code>ID –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π</code>\n\n"
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
					parse_mode="HTML"
				)
				return self.EXTEND_USER

			user_id_str, days_str = parts

			if not user_id_str.isdigit():
				await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
				return self.EXTEND_USER

			if not days_str.isdigit() or int(days_str) <= 0:
				await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
				return self.EXTEND_USER

			user_id = int(user_id_str)
			days = int(days_str)

			user = user_repository.get_by_id(user_id)
			if not user:
				await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
				return self.EXTEND_USER

			# –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
			new_end_date = user.billing_end_date + timedelta(days=days)
			user_repository.update(user_id, user.__class__(
				username=user.username,
				billing_start_date=user.billing_start_date,
				billing_end_date=new_end_date,
				status=user.status
			))

			await update.message.reply_text(
				f"‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!\n\n"
				f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
				f"üÜî ID: {user.id}\n"
				f"üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_end_date}\n"
				f"‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: {days}"
			)

			log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–ª–∏–ª –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} –Ω–∞ {days} –¥–Ω–µ–π")
			return ConversationHandler.END

		except Exception as e:
			log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
			await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
			return self.EXTEND_USER

	async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
		await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
		return ConversationHandler.END

	def _setup_handlers(self):
		"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
		if not self.application:
			raise RuntimeError("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

		# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
		self.application.add_handler(CommandHandler("start", self.start))
		self.application.add_handler(CommandHandler("get_config", self.get_config))
		self.application.add_handler(CommandHandler("stats", self.stats))
		self.application.add_handler(CommandHandler("admin", self.admin_panel))

		# Conversation Handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
		add_user_conv = ConversationHandler(
			entry_points=[MessageHandler(filters.Regex("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), self.add_user_start)],
			states={
				self.ADD_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_user_process)]
			},
			fallbacks=[CommandHandler("cancel", self.cancel)]
		)

		delete_user_conv = ConversationHandler(
			entry_points=[MessageHandler(filters.Regex("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), self.delete_user_start)],
			states={
				self.DELETE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.delete_user_process)]
			},
			fallbacks=[CommandHandler("cancel", self.cancel)]
		)

		extend_user_conv = ConversationHandler(
			entry_points=[MessageHandler(filters.Regex("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø"), self.extend_user_access)],
			states={
				self.EXTEND_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.extend_user_process)]
			},
			fallbacks=[CommandHandler("cancel", self.cancel)]
		)

		# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
		self.application.add_handler(MessageHandler(filters.Regex("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), self.show_users))
		self.application.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"), self.system_stats))

		# –î–æ–±–∞–≤–ª—è–µ–º Conversation Handlers
		self.application.add_handler(add_user_conv)
		self.application.add_handler(delete_user_conv)
		self.application.add_handler(extend_user_conv)

		log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

	def run(self):
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
		if not self.application:
			self.setup()

		log.info("üîÑ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
		self.application.run_polling(allowed_updates=Update.ALL_TYPES)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
vpn_bot = VPNBot()
# [file content end]